<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
    <div id="errorsCalories"></div>
  </div>
  <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
    <div id="errorsHR"></div>
  </div>
  <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
    <div id="errorsSteps"></div>
  </div>
</div>
<script>
  let maleErrorsCalories = JSON.parse('<%- maleErrorsCalories %>');
  let maleErrorsSteps = JSON.parse('<%- maleErrorsSteps %>');
  let maleErrorsHR = JSON.parse('<%- maleErrorsHR %>');

  let femaleErrorsCalories = JSON.parse('<%- femaleErrorsCalories %>');
  let femaleErrorsSteps = JSON.parse('<%- femaleErrorsSteps %>');
  let femaleErrorsHR = JSON.parse('<%- femaleErrorsHR %>');

  let allErrorsCalories = JSON.parse('<%- allErrorsCalories %>');
  let allErrorsSteps = JSON.parse('<%- allErrorsSteps %>');
  let allErrorsHR = JSON.parse('<%- allErrorsHR %>');
  caloriesOutliers = []
  for (let i = 0; i < maleErrorsCalories[6].length; i++) {
    caloriesOutliers.push([1, maleErrorsCalories[6][i]])
  }
  for (let i = 0; i < femaleErrorsCalories[6].length; i++) {
    caloriesOutliers.push([1, femaleErrorsCalories[6][i]])
  }
  for (let i = 0; i < allErrorsCalories[6].length; i++) {
    caloriesOutliers.push([2, allErrorsCalories[6][i]])
  }

  stepsOutliers = []
  for (let i = 0; i < femaleErrorsSteps[6].length; i++) {
    stepsOutliers.push([1, femaleErrorsSteps[6][i]])
  }
  for (let i = 0; i < femaleErrorsCalories[6].length; i++) {
    stepsOutliers.push([1, femaleErrorsCalories[6][i]])
  }
  for (let i = 0; i < allErrorsSteps[6].length; i++) {
    stepsOutliers.push([2, allErrorsSteps[6][i]])
  }

  hrOutliers = []
  for (let i = 0; i < maleErrorsHR[6].length; i++) {
    hrOutliers.push([1, maleErrorsHR[6][i]])
  }
  for (let i = 0; i < femaleErrorsHR[6].length; i++) {
    hrOutliers.push([1, femaleErrorsHR[6][i]])
  }
  for (let i = 0; i < allErrorsHR[6].length; i++) {
    hrOutliers.push([2, allErrorsHR[6][i]])
  }
  setTimeout(function(){

  Highcharts.chart('errorsCalories', {
    chart: {
      type: 'boxplot'
    },
    plotOptions: {
      boxplot: {
        fillColor: '#F0F0E0',
        lineWidth: 2,
        medianColor: '#0C5DA5',
        medianWidth: 3,
        stemColor: '#A63400',
        stemDashStyle: 'dot',
        stemWidth: 1,
        whiskerColor: '#3D9200',
        whiskerLength: '20%',
        whiskerWidth: 2,
        maxPointWidth: 50
      }
    },
    title: {
      text: 'Energy Consumption in Calories Error Box Plot For Genders'
    },

    legend: {
      enabled: false
    },

    xAxis: {
      categories: ['Male', 'Female', 'All'],
      title: {
        text: 'Participant Group'
      }
    },

    yAxis: {
      title: {
        text: 'Values'
      }
      // ,plotLines: [{
      //   value: 932,
      //   color: 'red',
      //   width: 1,
      //   label: {
      //     text: 'Actual Value',
      //     align: 'left',
      //     style: {
      //       color: 'grey'
      //     }
      //   }
      // }]
    },

    series: [{
      name: 'Errors',
      data: [
        maleErrorsCalories,
        femaleErrorsCalories,
        allErrorsCalories
      ],
      tooltip: {
        headerFormat: '<em>Data for {point.key}</em><br/>'
      }
    }
    , {
      name: 'Outlier',
      color: Highcharts.getOptions().colors[0],
      type: 'scatter',
      data: caloriesOutliers,
      marker: {
        fillColor: 'white',
        lineWidth: 1,
        lineColor: Highcharts.getOptions().colors[1]
      },
      tooltip: {
        pointFormat: 'Error: {point.y}'
      }
    }
    ]


  });
  }, 1000);

</script>
<script>
  Highcharts.chart('errorsHR', {

    chart: {
      type: 'boxplot'
    },
    plotOptions: {
      boxplot: {
        fillColor: '#F0F0E0',
        lineWidth: 2,
        medianColor: '#0C5DA5',
        medianWidth: 3,
        stemColor: '#A63400',
        stemDashStyle: 'dot',
        stemWidth: 1,
        whiskerColor: '#3D9200',
        whiskerLength: '20%',
        whiskerWidth: 2,
        maxPointWidth: 50
      }
    },
    title: {
      text: 'Heart Rate Error Box Plot For Genders'
    },

    legend: {
      enabled: false
    },

    xAxis: {
      categories: ['Male', 'Female', 'All'],
      title: {
        text: 'Participant Group'
      }
    },

    yAxis: {
      title: {
        text: 'Values'
      }
      // ,
      // plotLines: [{
      //   value: 760,
      //   color: 'red',
      //   width: 1,
      //   label: {
      //     text: 'Actual Value',
      //     align: 'left',
      //     style: {
      //       color: 'grey'
      //     }
      //   }
      // }]
    },

    series: [{
      name: 'Errors',
      data: [
        maleErrorsHR,
        femaleErrorsHR,
        allErrorsHR
      ],
      tooltip: {
        headerFormat: '<em>Experiment {point.key}</em><br/>'
      }
    }, {
      name: 'Outlier',
      color: Highcharts.getOptions().colors[0],
      type: 'scatter',
      data: hrOutliers,
      marker: {
        fillColor: 'white',
        lineWidth: 1,
        lineColor: Highcharts.getOptions().colors[1]
      },
      tooltip: {
        pointFormat: 'Error: {point.y}'
      }
    }]

  });
</script>
<script>
  Highcharts.chart('errorsSteps', {
    chart: {
      type: 'boxplot'
    },
    plotOptions: {
      boxplot: {
        fillColor: '#F0F0E0',
        lineWidth: 2,
        medianColor: '#0C5DA5',
        medianWidth: 3,
        stemColor: '#A63400',
        stemDashStyle: 'dot',
        stemWidth: 1,
        whiskerColor: '#3D9200',
        whiskerLength: '20%',
        whiskerWidth: 2,
        maxPointWidth: 50
      }
    },
    title: {
      text: 'Steps Error Box Plot For Genders'
    },

    legend: {
      enabled: false
    },

    xAxis: {
      categories: ['Male', 'Female', 'All'],
      title: {
        text: 'Participant Group'
      }
    },

    yAxis: {
      title: {
        text: 'Values'
      },
      plotLines: [{
        value: 932,
        color: 'red',
        width: 1,
        label: {
          text: 'Actual Value',
          align: 'left',
          style: {
            color: 'grey'
          }
        }
      }]
    },

    series: [{
      name: 'Errors',
      data: [
        maleErrorsSteps,
        femaleErrorsSteps,
        allErrorsSteps
      ],
      tooltip: {
        headerFormat: '<em>Experiment {point.key}</em><br/>'
      }
    }, {
      name: 'Outlier',
      color: Highcharts.getOptions().colors[0],
      type: 'scatter',
      data: stepsOutliers,
      marker: {
        fillColor: 'white',
        lineWidth: 1,
        lineColor: Highcharts.getOptions().colors[1]
      },
      tooltip: {
        pointFormat: 'Error: {point.y}'
      }
    }
    ]

  });
</script>